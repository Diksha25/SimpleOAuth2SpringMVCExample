<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<context:property-placeholder />

	<!-- Just for testing... -->
	<http pattern="/oauth/cache_approvals" security="none" xmlns="http://www.springframework.org/schema/security" />
	<http pattern="/oauth/uncache_approvals" security="none" xmlns="http://www.springframework.org/schema/security" />

		<!-- <intercept-url pattern="/sparklr/**" access="ROLE_USER" /> <intercept-url 
			pattern="/facebook/**" access="ROLE_USER" /> <sec:intercept-url pattern="/**" 
			access="IS_AUTHENTICATED_ANONYMOUSLY" /> -->
<!-- 
	<sec:http access-denied-page="/login.jsp?authorization_error=true" use-expressions="true">
		<sec:intercept-url pattern="/home/*"
			access="hasRole('ROLE_USER') and fullyAuthenticated"
			requires-channel="https" />
		<sec:intercept-url pattern="/*" access="permitAll"
			requires-channel="any" />

		<sec:form-login authentication-failure-url="/login.jsp?authentication_error=true"
			default-target-url="/index.jsp" login-page="/login.jsp"
			login-processing-url="/login.do" />
		<sec:logout logout-success-url="/index.jsp" logout-url="/logout.do" />
		<sec:anonymous />
		<sec:custom-filter ref="oauth2ClientFilter"
			after="EXCEPTION_TRANSLATION_FILTER" />
	</sec:http>
 -->
	<sec:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<sec:anonymous enabled="false" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request 
			parameters -->
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>

	<http pattern="/oauth/(users|clients)/.*" request-matcher="regex"
		create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
		use-expressions="true" xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="false" />
		<intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('write')"
			method="DELETE" />
		<intercept-url pattern="/oauth/users/.*"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('read')"
			method="GET" />
		<intercept-url pattern="/oauth/clients/.*"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.isClient() and #oauth2.hasScope('read')"
			method="GET" />
		<intercept-url pattern="/**" access="denyAll()" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>

	<http access-denied-page="/login?authorization_error=true" disable-url-rewriting="true" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/**" access="ROLE_USER" />
		<intercept-url pattern="/home/**" access="ROLE_USER" />
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />

		<form-login authentication-failure-url="/login?authentication_error=true"
			default-target-url="/" login-page="/login" login-processing-url="/login.do" />
		<logout logout-success-url="/" logout-url="/logout.do" />
		<anonymous />
	</http>	

	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="oauth2" />
	</bean>

	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="oauth2/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>

	<authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider>
			<user-service id="userDetailsService">
				<user name="tester" password="tester" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>

	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="tokenEnhancer" ref="tokenEnhancer" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="tokenEnhancer" class="org.springsecurity.oauth2.oauth.OAuth2TokenEnhancer" />

	<bean id="requestFactory" class="org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory">
		<constructor-arg name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="userApprovalHandler" class="org.springsecurity.oauth2.oauth.OAuth2UserApprovalHandler">
		<property name="approvalStore" ref="approvalStore" />
		<property name="clientDetailsService" ref="clientDetails" />
		<property name="requestFactory" ref="requestFactory" />
	</bean>

	<bean id="approvalStore" class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
		<property name="tokenStore" ref="tokenStore" />
	</bean>

	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter" resource-id="oauth2" token-services-ref="tokenServices" />

	<oauth:client-details-service id="clientDetails" >
		<oauth:client client-id="my-trusted-client" 
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust"
			access-token-validity="60" />
		<oauth:client client-id="my-trusted-client-with-secret" 
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="somesecret" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" />
		<oauth:client client-id="my-client-with-secret" 
			authorized-grant-types="client_credentials" authorities="ROLE_CLIENT"
			scope="read" secret="secret" />
		<oauth:client client-id="my-less-trusted-client"
			authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT" />
			<!-- 
		<oauth:client client-id="my-less-trusted-autoapprove-client"
			authorized-grant-types="implicit" authorities="ROLE_CLIENT" scope="read,write,trust"
			autoapprove="true" />
			 -->
		<oauth:client client-id="my-client-with-registered-redirect"
			authorized-grant-types="authorization_code,client_credentials"
			authorities="ROLE_CLIENT" redirect-uri="http://anywhere?key=value"
			scope="read,trust" />
		<oauth:client client-id="my-untrusted-client-with-registered-redirect"
			authorized-grant-types="authorization_code" authorities="ROLE_CLIENT"
			redirect-uri="http://anywhere" scope="read" />
			<!-- 
		<oauth:client client-id="tonr" resource-ids="sparklr"
			authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT"
			scope="read,write" secret="secret" />
		<oauth:client client-id="tonr-with-redirect"
			resource-ids="sparklr" authorized-grant-types="authorization_code,implicit"
			authorities="ROLE_CLIENT" scope="read,write" secret="secret"
			redirect-uri="${tonr.redirect:http://localhost:8080/tonr2/sparklr/redirect}" />
			 -->
	</oauth:client-details-service>

	<mvc:annotation-driven />

	<mvc:default-servlet-handler />

	<sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
		<!--you could also wire in the expression handler up at the layer of the 
			http filters. See https://jira.springsource.org/browse/SEC-1452 -->
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>

	<oauth:expression-handler id="oauthExpressionHandler" />

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />


	<bean id="adminController" class="org.springsecurity.oauth2.controller.oauth.AdminController">
		<property name="tokenServices" ref="tokenServices" />
		<property name="tokenStore" ref="tokenStore" />
		<property name="userApprovalHandler" ref="userApprovalHandler" />
	</bean>

	<!-- Override the default mappings for approval and error pages -->
	<bean id="accessConfirmationController" class="org.springsecurity.oauth2.controller.oauth.AccessConfirmationController">
		<property name="clientDetailsService" ref="clientDetails" />
		<property name="approvalStore" ref="approvalStore" />
	</bean>
</beans>
